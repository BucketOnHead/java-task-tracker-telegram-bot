package com.github.bucketonhead.service.processor.task.impl;

import com.github.bucketonhead.dao.AppTaskJpaRepository;
import com.github.bucketonhead.dao.AppUserJpaRepository;
import com.github.bucketonhead.entity.AppTask;
import com.github.bucketonhead.entity.AppUser;
import com.github.bucketonhead.entity.enums.BotState;
import com.github.bucketonhead.service.processor.basic.enums.BasicCommand;
import com.github.bucketonhead.service.processor.task.TaskService;
import com.github.bucketonhead.service.processor.task.enums.TaskCommand;
import com.github.bucketonhead.service.sender.MessageSender;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@Slf4j
@RequiredArgsConstructor
public class TaskServiceImpl implements TaskService {
    private final MessageSender msgSender;
    private final AppUserJpaRepository appUserJpaRepository;
    private final AppTaskJpaRepository appTaskJpaRepository;

    @Override
    public void processCommand(AppUser user, Message msg) {
        if (!TaskCommand.isCommandPattern(msg.getText())) {
            var responseMessage = "–Ø –±—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –ø–æ–≥–æ–≤–æ—Ä–∏–ª, " +
                    "–Ω–æ —è –ø—Ä–æ—Å—Ç–æ –±–æ—Ç ‚ò∫";
            msgSender.send(responseMessage, msg.getChatId());
            return;
        }

        var cmd = TaskCommand.fromValue(msg.getText());
        if (cmd == null) {
            var responseMessage = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!";
            msgSender.sendError(responseMessage, msg.getChatId());
            return;
        }

        if (TaskCommand.HELP == cmd) {
            processHelpCommand(msg);
        } else if (TaskCommand.NEW_TASK == cmd) {
            processNewTaskCommand(user, msg);
        } else if (TaskCommand.MY_TASKS == cmd) {
            processMyTasksCommand(user, msg);
        } else if (TaskCommand.DONE_TASK == cmd) {
            processDoneTaskCommand(user, msg);
        } else if (TaskCommand.BACK == cmd) {
            processBackCommand(user, msg);
            processHelpCommand(msg);
        } else {
            var responseMessage = "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, " +
                    "–∑–Ω–∞—á–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–±—ã–ª –ø–æ–¥–∫–ª—é—á–∏—Ç—å " +
                    "—ç—Ç—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!";
            msgSender.sendError(responseMessage, msg.getChatId());
        }
    }

    @Override
    public void processHelpCommand(Message msg) {
        Map<Object, String> cmdDesc = new LinkedHashMap<>();
        cmdDesc.put(BasicCommand.MAIN, "–≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        cmdDesc.put(TaskCommand.NEW_TASK, "—Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫–æ –≤—Ä–µ–º–µ–Ω–∏");
        cmdDesc.put(TaskCommand.MY_TASKS, "–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–≤–æ–∏—Ö –∑–∞–¥–∞—á");
        cmdDesc.put(TaskCommand.DONE_TASK, "–æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π");
        cmdDesc.put(TaskCommand.HELP, "–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥");

        var responseMessage = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:" + cmdDesc.entrySet()
                .stream()
                .map(entry -> String.format("%n%n%s - %s.", entry.getKey(), entry.getValue()))
                .collect(Collectors.joining());
        msgSender.send(responseMessage, msg.getChatId());
    }

    @Override
    public void processNewTaskCommand(AppUser user, Message msg) {
        String responseMessage;
        if (BotState.WAIT_TASK == user.getState()) {
            if (TaskCommand.isCommandPattern(msg.getText())) {
                var cmd = TaskCommand.fromValue(msg.getText());
                if (cmd != null) {
                    processBackCommand(user, msg);

                    if (TaskCommand.BACK == cmd) {
                        processHelpCommand(msg);
                    } else {
                        processCommand(user, msg);
                    }
                    return;
                }
            }

            AppTask transientAppTask = AppTask.builder()
                    .description(msg.getText())
                    .creator(user)
                    .build();
            appTaskJpaRepository.save(transientAppTask);
            responseMessage = String.format("" +
                    "–ó–∞–ø–∏—Å–∞–ª–∏ üòâ –ß—Ç–æ-—Ç–æ –µ—â—ë?%n%n" +
                    "%s - –Ω–∞–∑–∞–¥", TaskCommand.BACK);
        } else {
            user.setState(BotState.WAIT_TASK);
            appUserJpaRepository.save(user);
            responseMessage = "–ß—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å?";
        }

        msgSender.send(responseMessage, msg.getChatId());
    }

    @Override
    public void processMyTasksCommand(AppUser user, Message msg) {
        String responseMessage;
        var tasks = user.getTasks();
        if (tasks == null || tasks.isEmpty()) {
            responseMessage = "–í—ã –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ ü•∫\n\n" +
                    TaskCommand.NEW_TASK + " - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É";
        } else {
            StringBuilder sb = new StringBuilder();
            sb.append("–í–∞—à–∏ –∑–∞–¥–∞—á–∏:");
            for (int i = 0; i < tasks.size(); i++) {
                sb.append(String.format("%n%nüìå –ó–∞–¥–∞—á–∞#%d%n", i + 1));
                sb.append(tasks.get(i).getDescription());
            }
            responseMessage = sb.toString();
        }

        msgSender.send(responseMessage, msg.getChatId());
    }

    @Override
    public void processDoneTaskCommand(AppUser user, Message msg) {
        String responseMessage;
        if (BotState.DONE_TASK == user.getState()) {
            if (TaskCommand.isCommandPattern(msg.getText())) {
                var cmd = TaskCommand.fromValue(msg.getText());
                if (cmd != null) {
                    processBackCommand(user, msg);

                    if (TaskCommand.BACK == cmd) {
                        processHelpCommand(msg);
                    } else {
                        processCommand(user, msg);
                    }
                    return;
                }
            }

            var tasks = user.getTasks();

            var choose = msg.getText();
            int taskNumber;
            try {
                taskNumber = Integer.parseInt(choose);
            } catch (NumberFormatException e) {
                responseMessage = "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ (1 - " + tasks.size() + ")";
                msgSender.sendError(responseMessage, msg.getChatId());
                return;
            }

            if (taskNumber < 1 || taskNumber > tasks.size()) {
                responseMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏! –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ " + tasks.size();
                msgSender.sendError(responseMessage, msg.getChatId());
                return;
            }

            tasks.remove(taskNumber - 1);
            appUserJpaRepository.save(user);
            if (tasks.isEmpty()) {
                responseMessage = String.format("" +
                                "–ì–æ—Ç–æ–≤–æ! –í—ã—á–µ—Ä–∫–Ω—É–ª–∏ –∑–∞–¥–∞—á—É %d " +
                                "–∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, –±–æ–ª—å—à–µ –∑–∞–¥–∞—á –Ω–µ—Ç üôÉ",
                        taskNumber);
                msgSender.send(responseMessage, msg.getChatId());
                processBackCommand(user, msg);
                processHelpCommand(msg);
                return;
            } else {
                processMyTasksCommand(user, msg);
                responseMessage = String.format("" +
                                "–ì–æ—Ç–æ–≤–æ! –í—ã—á–µ—Ä–∫–Ω—É–ª–∏ –∑–∞–¥–∞—á—É %d " +
                                "–∏–∑ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á, –æ—Ç–º–µ—Ç–∏—Ç—å –µ—â—ë –æ–¥–Ω—É?%n" +
                                "%n%s - –≤—ã–π—Ç–∏",
                        taskNumber,
                        TaskCommand.BACK);
            }
        } else {
            var tasks = user.getTasks();
            if (tasks.isEmpty()) {
                responseMessage = "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ ü•∫\n\n" +
                        TaskCommand.NEW_TASK + " - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É";
                msgSender.send(responseMessage, msg.getChatId());
                return;
            }
            processMyTasksCommand(user, msg);

            user.setState(BotState.DONE_TASK);
            appUserJpaRepository.save(user);
            responseMessage = "–ö–∞–∫—É—é –∑–∞–¥–∞—á—É –≤—ã—á–µ—Ä–∫–Ω—É—Ç—å? (1 - " + tasks.size() + ")";
        }

        msgSender.send(responseMessage, msg.getChatId());
    }

    @Override
    public void processBackCommand(AppUser user, Message msg) {
        String responseMessage;
        if (BotState.TASK_MODE == user.getState()) {
            responseMessage = "–í—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –∑–∞–¥–∞—á üòâ";
        } else {
            user.setState(BotState.TASK_MODE);
            appUserJpaRepository.save(user);
            responseMessage = "–í–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –Ω–∞–∑–∞–¥!";
        }

        msgSender.send(responseMessage, msg.getChatId());
    }
}
