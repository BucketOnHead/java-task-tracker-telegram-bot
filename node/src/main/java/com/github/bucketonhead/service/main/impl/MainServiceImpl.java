package com.github.bucketonhead.service.main.impl;

import com.github.bucketonhead.dao.AppUserJpaRepository;
import com.github.bucketonhead.dao.RawDataJpaRepository;
import com.github.bucketonhead.entity.AppUser;
import com.github.bucketonhead.entity.RawData;
import com.github.bucketonhead.entity.enums.BotState;
import com.github.bucketonhead.service.main.MainService;
import com.github.bucketonhead.service.main.enums.ServiceCommand;
import com.github.bucketonhead.service.rabbitmq.ProducerService;
import com.github.bucketonhead.utils.TextMessageUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;

@Service
@Slf4j
@RequiredArgsConstructor
public class MainServiceImpl implements MainService {
    private final ProducerService producerService;
    private final RawDataJpaRepository rawDataJpaRepository;
    private final AppUserJpaRepository appUserJpaRepository;

    @Override
    public void processTextMessage(Update update) {
        saveRawData(update);
        var msg = update.getMessage();
        var appUser = findOrSaveAppUser(msg.getFrom());

        var serviceCommand = ServiceCommand.fromValue(msg.getText());
        if (ServiceCommand.CANCEL.equals(serviceCommand)) {
            processCancelCommand(appUser, msg);
            return;
        }

        if (BotState.BASIC_STATE == appUser.getState()) {
            processBasicStateCommand(appUser, msg);
        } else if (BotState.WAIT_FOR_EMAIL_STATE == appUser.getState()) {
            // TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è email-—Å–µ—Ä–≤–∏—Å–∞
        } else {
            log.error("state: {}, –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω", appUser.getState());
            var text = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø—É—Å—Ç–∏–ª –æ—à–∏–±–∫—É –ø—Ä–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ " +
                    "—ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! " +
                    "–ê –ø–æ–∫–∞ –≤–µ—Ä–Ω—ë–º –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚ò∫";
            var responseMessage = TextMessageUtils.buildErrorMessage(text);
            sendResponseMessage(responseMessage, msg.getChatId());
            processCancelCommand(appUser, msg);
        }
    }

    private void processBasicStateCommand(AppUser appUser, Message msg) {
        String responseMessage;
        if (!msg.getText().startsWith(ServiceCommand.PREFIX)) {
            responseMessage = "–Ø –±—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –ø–æ–≥–æ–≤–æ—Ä–∏–ª, " +
                    "–Ω–æ —è –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –∫–æ–º–∞–Ω–¥—ã ‚ò∫";
            sendResponseMessage(responseMessage, msg.getChatId());
            return;
        }

        var serviceCommand = ServiceCommand.fromValue(msg.getText());
        if (serviceCommand == null) {
            var text = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!";
            responseMessage = TextMessageUtils.buildErrorMessage(text);
        } else if (ServiceCommand.HELP == serviceCommand) {
            var text = "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:%n%n" +
                    "%s - –æ—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã";
            responseMessage = String.format(text, ServiceCommand.CANCEL);
        } else if (ServiceCommand.START == serviceCommand) {
            var text = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ " +
                    "–¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ %s";
            responseMessage = String.format(text, ServiceCommand.HELP);
        } else {
            var text = "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, " +
                    "–∑–Ω–∞—á–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–±—ã–ª –ø–æ–¥–∫–ª—é—á–∏—Ç—å " +
                    "—ç—Ç—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!";
            responseMessage = TextMessageUtils.buildErrorMessage(text);
        }

        sendResponseMessage(responseMessage, msg.getChatId());
    }

    private void processCancelCommand(AppUser appUser, Message msg) {
        String responseMessage;
        if (BotState.BASIC_STATE == appUser.getState()) {
            responseMessage = "–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üòâ";
        } else {
            appUser.setState(BotState.BASIC_STATE);
            appUserJpaRepository.save(appUser);
            responseMessage = "–í–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!";
        }
        sendResponseMessage(responseMessage, msg.getChatId());
    }

    private void sendResponseMessage(String text, Long chatId) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .build();
        producerService.producerAnswer(sendMessage);
    }

    private void saveRawData(Update update) {
        RawData rawData = RawData.builder()
                .event(update)
                .build();
        rawDataJpaRepository.save(rawData);
    }

    private AppUser findOrSaveAppUser(User tgUser) {
        AppUser persistenceAppUser = appUserJpaRepository.findByTelegramUserId(tgUser.getId());
        if (persistenceAppUser == null) {
            AppUser transientAppUser = AppUser.builder()
                    .telegramUserId(tgUser.getId())
                    .firstName(tgUser.getFirstName())
                    .lastName(tgUser.getLastName())
                    .username(tgUser.getUserName())
                    // TODO: –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ false –ø–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ email-—Å–µ—Ä–≤–∏—Å–∞
                    .isActive(Boolean.TRUE)
                    .state(BotState.BASIC_STATE)
                    .build();
            persistenceAppUser = appUserJpaRepository.save(transientAppUser);
        }
        return persistenceAppUser;
    }
}
