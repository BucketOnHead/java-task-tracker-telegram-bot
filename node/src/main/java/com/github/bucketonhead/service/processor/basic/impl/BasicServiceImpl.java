package com.github.bucketonhead.service.processor.basic.impl;

import com.github.bucketonhead.dao.AppUserJpaRepository;
import com.github.bucketonhead.entity.user.AppUser;
import com.github.bucketonhead.entity.user.enums.BotState;
import com.github.bucketonhead.service.processor.basic.BasicService;
import com.github.bucketonhead.service.processor.main.enums.AppCommand;
import com.github.bucketonhead.service.sender.MessageSender;
import com.github.bucketonhead.utils.ResponseMessageUtils;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.LinkedHashMap;

@Service
@RequiredArgsConstructor
public class BasicServiceImpl implements BasicService {
    private final MessageSender msgSender;
    private final AppUserJpaRepository appUserJpaRepository;

    @Override
    public void processCommand(AppUser user, Message msg) {
        if (!AppCommand.isCommandPattern(msg.getText())) {
            processNotCommand(msg);
            return;
        }

        var cmd = AppCommand.parseAppCommand(msg.getText());
        if (cmd == null) {
            processBadCommand(msg);
        } else if (AppCommand.HELP == cmd) {
            processHelpCommand(msg);
        } else if (AppCommand.MAIN == cmd) {
            processMainCommand(user, msg);
        } else if (AppCommand.PROFILE == cmd) {
            processProfileCommand(user, msg);
        } else if (AppCommand.START == cmd) {
            processStartCommand(user, msg);
        } else if (AppCommand.TASK_MODE == cmd) {
            processTaskModeCommand(user, msg);
        } else {
            processNotImplemented(msg);
        }
    }

    private void processNotCommand(Message msg) {
        var text = "–Ø –±—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –ø–æ–≥–æ–≤–æ—Ä–∏–ª, " +
                "–Ω–æ —è –ø—Ä–æ—Å—Ç–æ –±–æ—Ç, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –∫–æ–º–∞–Ω–¥—ã ‚ò∫";
        msgSender.send(text, msg.getChatId());
    }

    private void processBadCommand(Message msg) {
        var text = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!";
        msgSender.sendError(text, msg.getChatId());
    }

    private void processNotImplemented(Message msg) {
        var text = "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, " +
                "–∑–Ω–∞—á–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–±—ã–ª –ø–æ–¥–∫–ª—é—á–∏—Ç—å " +
                "—ç—Ç—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!";
        msgSender.sendError(text, msg.getChatId());
    }

    @Override
    public void processHelpCommand(Message msg) {
        var cmdDesc = new LinkedHashMap<AppCommand, String>();
        cmdDesc.put(AppCommand.PROFILE, "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å");
        cmdDesc.put(AppCommand.TASK_MODE, "–ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏");
        cmdDesc.put(AppCommand.HELP, "–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥");

        var text = ResponseMessageUtils.buildHelp(cmdDesc);
        msgSender.send(text, msg.getChatId());
    }

    @Override
    public void processMainCommand(AppUser user, Message msg) {
        String text;
        if (BotState.BASIC == user.getState()) {
            text = "–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üòâ";
        } else {
            user.setState(BotState.BASIC);
            appUserJpaRepository.save(user);

            text = "–í–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!";
        }

        msgSender.send(text, msg.getChatId());
    }

    private void processProfileCommand(AppUser user, Message msg) {
        var text = ResponseMessageUtils.buildProfileInfo(user);
        msgSender.sendParseMarkdown(text, msg.getChatId());
    }

    @Override
    public void processStartCommand(AppUser user, Message msg) {
        var regDuration = Duration.between(user.getFirstLoginDate(), LocalDateTime.now());
        if (regDuration.toSeconds() < 3) {
            processWelcome(msg);
        } else {
            processReturn(msg);
        }
    }

    private void processWelcome(Message msg) {
        var text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ü•∞\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ " + AppCommand.HELP +
                " —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é üòä";
        msgSender.send(text, msg.getChatId());
    }

    private void processReturn(Message msg) {
        var text = "–ê —è –í–∞—Å –ø–æ–º–Ω—é üôÉ\n\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ " + AppCommand.DELETE +
                ", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –≤—Å—ë —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ ‚ò†\n\n" +
                "‚ùó –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç " +
                "–±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ üò±";
        msgSender.send(text, msg.getChatId());
    }

    @Override
    public void processTaskModeCommand(AppUser user, Message msg) {
        String text;
        if (BotState.TASK_MODE == user.getState()) {
            text = "–í—ã —É–∂–µ –≤ —Ä–µ–∂–∏–º–µ –∑–∞–¥–∞—á üôÇ";
        } else {
            user.setState(BotState.TASK_MODE);
            appUserJpaRepository.save(user);

            text = "–ü–µ—Ä–µ–≤—ë–ª –≤–∞—Å –≤ —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏";
        }

        msgSender.send(text, msg.getChatId());
    }

    @Override
    public void processDeleteCommand(AppUser user, Message msg) {
        appUserJpaRepository.deleteById(user.getId());

        var text = "–ì–æ—Ç–æ–≤–æ! –° —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ " +
                "–º—ã –±–æ–ª—å—à–µ –Ω–µ –∑–Ω–∞–∫–æ–º—ã üòî\n\n";
        msgSender.send(text, msg.getChatId());
    }
}
