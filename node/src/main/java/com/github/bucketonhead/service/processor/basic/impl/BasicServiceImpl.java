package com.github.bucketonhead.service.processor.basic.impl;

import com.github.bucketonhead.dao.AppUserJpaRepository;
import com.github.bucketonhead.entity.AppUser;
import com.github.bucketonhead.entity.enums.BotState;
import com.github.bucketonhead.service.processor.basic.BasicService;
import com.github.bucketonhead.service.processor.basic.enums.BasicCommand;
import com.github.bucketonhead.service.processor.task.TaskService;
import com.github.bucketonhead.service.rabbitmq.ProducerService;
import com.github.bucketonhead.utils.ResponseMessageUtils;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.stream.Collectors;

@Service
@Slf4j
@RequiredArgsConstructor
public class BasicServiceImpl implements BasicService {
    private final ProducerService producerService;
    private final AppUserJpaRepository appUserJpaRepository;
    private final TaskService taskService;

    @Override
    public void processCommand(AppUser user, Message msg) {
        if (!BasicCommand.isCommandPattern(msg.getText())) {
            var responseMessage = "–Ø –±—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –ø–æ–≥–æ–≤–æ—Ä–∏–ª, " +
                    "–Ω–æ —è –ø—Ä–æ—Å—Ç–æ –±–æ—Ç ‚ò∫";
            sendMessage(responseMessage, msg.getChatId());
            return;
        }

        var command = BasicCommand.fromValue(msg.getText());
        if (command == null) {
            var text = "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞!";
            var responseMessage = ResponseMessageUtils.buildErrorMessage(text);
            sendMessage(responseMessage, msg.getChatId());
            return;
        }

        String responseMessage;
        if (BasicCommand.START == command) {
            responseMessage = processStartCommand(user);
        } else if (BasicCommand.HELP == command) {
            responseMessage = processHelpCommand();
        } else if (BasicCommand.CANCEL == command) {
            responseMessage = processCancelCommand(user);
        } else if (BasicCommand.TASK_MODE == command) {
            responseMessage = processTaskModeCommand(user);
            sendMessage(responseMessage, msg.getChatId());

            responseMessage = taskService.processHelpCommand();
            sendMessage(responseMessage, msg.getChatId());
            return;
        } else {
            var text = "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, " +
                    "–∑–Ω–∞—á–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–±—ã–ª –ø–æ–¥–∫–ª—é—á–∏—Ç—å " +
                    "—ç—Ç—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!";
            responseMessage = ResponseMessageUtils.buildErrorMessage(text);
        }

        sendMessage(responseMessage, msg.getChatId());
    }

    private String processTaskModeCommand(AppUser user) {
        user.setState(BotState.TASK_MODE);
        appUserJpaRepository.save(user);
        return "–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏";
    }

    @Override
    public String processCancelCommand(AppUser user) {
        String responseMessage;
        if (BotState.BASIC == user.getState()) {
            responseMessage = "–í—ã —É–∂–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é üòâ";
        } else {
            user.setState(BotState.BASIC);
            appUserJpaRepository.save(user);
            responseMessage = "–í–µ—Ä–Ω—É–ª–∏ –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!";
        }

        return responseMessage;
    }

    @Override
    public String processHelpCommand() {
        Map<BasicCommand, String> commandDescription = new LinkedHashMap<>();
        commandDescription.put(BasicCommand.HELP, "–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥");
        commandDescription.put(BasicCommand.TASK_MODE, "–ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏");
        commandDescription.put(BasicCommand.CANCEL, "–æ—Ç–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∫–æ–º–∞–Ω–¥—ã");

        return "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:" + commandDescription.entrySet()
                .stream()
                .map(entry -> String.format("%n%n%s - %s.", entry.getKey(), entry.getValue()))
                .collect(Collectors.joining());
    }

    @Override
    public String processStartCommand(AppUser user) {
        String responseMessage;
        var regDuration = Duration.between(user.getFirstLoginDate(), LocalDateTime.now());
        if (regDuration.toSeconds() < 3) {
            responseMessage = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ü•∞\n\n" +
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ " + BasicCommand.HELP +
                    " —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é üòä";
        } else {
            // TODO: —É–±—Ä–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ!!!
            responseMessage = "–ê —è –í–∞—Å –ø–æ–º–Ω—é üôÉ\n\n" +
                    "üß® –û–±–Ω—É–ª–∏–ª –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç üß®";
            appUserJpaRepository.deleteById(user.getId());
        }

        return responseMessage;
    }

    private void sendMessage(String text, Long chatId) {
        SendMessage sendMessage = SendMessage.builder()
                .chatId(chatId)
                .text(text)
                .build();
        producerService.producerAnswer(sendMessage);
    }
}
